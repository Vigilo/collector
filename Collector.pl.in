#!/usr/bin/perl -w
# vim: set fileencoding=utf-8 sw=4 ts=4 et :
# nagios: +epn
################################################################################
## $Id$
##
## Collector :  Nagios script which collects informations from hosts
#               in one pass
## Copyright (C) 2005-2020 CS-SI
##
## This program is free software; you can redistribute it and/or
## modify it under the terms of the GNU General Public License
## as published by the Free Software Foundation; either version 2
## of the License, or (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program; if not, write to the Free Software
## Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
################################################################################

=head1 Collector

=head2 Overview

This is a Nagios Plugin intended to monitor hosts using SNMP.

This collector is compliant with ePN, which produces less overhead than
if it was a fork'ed plugin. So enable ePN in your Nagios configuration
to have a maximum benefit of this plugin.

Collector is supposed to be run once for each host and to retrieve
all supervision data in a one-shot process.

=cut

package collector;

use POSIX;
use strict;
use Nagios::Plugin qw(%ERRORS);
use Getopt::Long;
&Getopt::Long::config('bundling');

############

my $confdir = "@CONFDIR@";
my $PROGNAME = "Collector";
my $debug = 0;
my ($opt_V, $opt_h, $opt_H, $opt_d, $conf);
our ($lib, $path, $timeout, $nagios_cmd_file, $connector_socket, $tmppath);

############

=head2 print_help()

=head3 Overview

Display a command line arguments help

=head3 Arguments

None

=head3 Returns

Nothing

=cut

sub print_help()
{
    printf "Nagios script which collects informations from hosts in one pass\n";
    printf "\nUsage:\n";
    printf "   -V (--version)    Plugin version\n";
    printf "   -H (--hostname)   Hostname\n";
    printf "   -C (--conf)       Config file (defaults to $confdir/general.conf)\n";
    printf "   -h (--help)       usage help \n\n";
    printf "   -d (--debug)      debug \n\n";
}

sub process_arguments()
{
    my $status;

    $status = GetOptions(
        "V"   => \$opt_V, "version"    => \$opt_V,
        "h"   => \$opt_h, "help"       => \$opt_h,
        "d"   => \$opt_d, "debug"      => \$opt_d,
        "H=s" => \$opt_H, "hostname=s" => \$opt_H,
        "C=s" => \$conf,  "conf=s"     => \$conf,
    );

    if ($status == 0) {
        print_help();
        exit $ERRORS{'OK'};
    }

    if ($opt_V) {
        print_revision($PROGNAME,'$Revision$ ');
        exit $ERRORS{'OK'};
    }

    if ($opt_h) {
        print_help();
        exit $ERRORS{'OK'};
    }

    if ($opt_d) {
        $debug = 1;
    }

    if (! $opt_H) {
        # FIXME : Verify the hostname structure
        print "Provide a hostname\n";
        exit $ERRORS{'UNKNOWN'};
    }

    unless (defined $conf) {
        $conf = "$confdir/general.conf";
    }
}

### Validate Arguments
process_arguments();

## Load the main configuration file
do $conf;

if (! $lib) {
    print "Provide a pathname for the library directory\n";
    exit $ERRORS{'UNKNOWN'};
} elsif (! -x $lib) {
    print "Provide an existing library path: $lib\n";
    exit $ERRORS{'UNKNOWN'};
}

require "$lib/collector.pm";
check_conf();
load_libs($debug);
my ($state, $answer) = collect_host($opt_H);
print "$answer\n";
exit $ERRORS{$state};

